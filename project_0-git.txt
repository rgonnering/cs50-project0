project_0-git.txt
==============================
Web Programming with Python and JavaScript

Project 0: Homepage
Objectives
    Become more comfortable with HTML and CSS to design and style webpages.
    Learn to use SCSS to write more complex stylesheets for your webpages.

Getting Started
Your First Webpage

Download the distro code for this project from https://cdn.cs50.net/web/2018/spring/projects/0/project0.zip and unzip project0.zip, which should yield a directory called project0.

Then, in a terminal window (located in /Applications/Utilities on Mac or by typing cmd in the Windows task bar), move to the directory where you extracted project0 (recall that the cd command can change your current directory), and run

cd project0

to enter the project directory. Now, run

touch index.html

to create a new index.html file in your repository. Open the file with your favorite text editor: popular choices include Atom, Sublime Text, and VS Code. Then, paste in the following contents:

<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
    </head>
    <body>
        Hello, world!
    </body>
</html>

Then, save your index.html file.

Requirements
============
Alright, now it’s time to make your website your own. Design a personal webpage about yourself, one of your interests, or any other topic of your choice. The subject matter, look and feel, and design of the site are entirely up to you, subject to the following 

* Your website must contain at least four different .html pages, and it should be possible to get from any page on your website to any other page by following one or more hyperlinks.
* Your website must include at least 
    one list (ordered or unordered), 
    at least one table, and 
    at least one image.
* Your website must have at least one stylesheet file.
* Your stylesheet(s) must use at least five different CSS properties, and at least five different types of CSS selectors. You must use the #id selector at least once, and the .class selector at least once.
* Your stylesheet(s) must include at least one mobile-responsive @media query, such that something about the styling changes for smaller screens.

* You must use Bootstrap 4 on your website, taking advantage of at least one Bootstrap component, and using at least two Bootstrap columns for layout purposes using Bootstrap’s grid model.

* Your stylesheets must use at least one SCSS variable, at least one example of SCSS nesting, and at least one use of SCSS inheritance.

* In README.md, include a short writeup describing your project, what’s contained in each file, and (optionally) any other additional information the staff should know about your project.

Note that not all of the above requirements are covered in Lecture 0, some will be introduced in Lecture 1.

How to Submit
-------------
    Visit cs50.me, log in with your GitHub account, and click Authorize submit50. You should receive two emails from GitHub inviting you to join CS50’s “organizations” on GitHub. Click the button in those emails to accept both of the invitations.
    Install Git and, optionally, install submit50.

    Using Git, push your work to https://github.com/submit50/USERNAME.git, where USERNAME is your GitHub username, on a branch called cs50/web/2018/x/projects/0 or, if you’ve installed submit50, execute

    submit50 cs50/web/2018/x/projects/0

    instead.
    Record a 1- to 5-minute screencast in which you demonstrate your app’s functionality and/or walk viewers through your code. Upload that video to YouTube (as unlisted or public, but not private) or somewhere else.
    Submit this form.


============================================================

$ git add list.html
$ git status
    On branch bootstrap
    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)
            modified:   index.html
            modified:   list.html
            modified:   project_0-git.txt
            modified:   style.css
            modified:   table.html
    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)
            modified:   README.md
            modified:   style.css

Edit image.html
    <img src="kittewake.JPG" alt="USS Kittewake" />

$ git add image.html
$ git status
    On branch bootstrap
    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)
            modified:   image.html
            modified:   index.html
            modified:   list.html
            modified:   project_0-git.txt
            modified:   style.css
            modified:   table.html
    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)
            modified:   README.md
            modified:   index.html
            modified:   project_0-git.txt
            modified:   style.css
$ git add .
$ git status
    On branch bootstrap
    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)
            modified:   README.md
            modified:   image.html
            modified:   index.html
            modified:   list.html
            modified:   project_0-git.txt
            modified:   style.css
            modified:   table.html

Commit final changes to bootstrap branch
----------------------------------------
$ git branch
* bootstrap
  master
$ git status
    On branch bootstrap
    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)
            modified:   README.md
            modified:   image.html
            modified:   index.html
            modified:   list.html
            modified:   project_0-git.txt
            modified:   style.css
            modified:   table.html
    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)
            modified:   README.md
            modified:   index.html
            modified:   list.html
            modified:   project_0-git.txt
$ git add .
$ git status
    On branch bootstrap
    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)
            modified:   README.md
            modified:   image.html
            modified:   index.html
            modified:   list.html
            modified:   project_0-git.txt
            modified:   style.css
            modified:   table.html
$ git commit -m "Save bootstrap branch features"
    [bootstrap 27ea994] Save bootstrap branch features
     7 files changed, 532 insertions(+), 103 deletions(-)
     rewrite image.html (71%)
     rewrite index.html (64%)
     rewrite list.html (81%)

$ git help
* These are common Git commands used in various situations:
* start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an 
                existing one
* work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index
* examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status
* grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG 
* collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository 
                or a local branch
   push       Update remote refs along with associated objects

$ git help merge
    git-merge - Join two or more development histories together
    Assume the following history exists and the current branch is "master":
                         A---B---C topic
                        /
                   D---E---F---G master
    Then "git merge topic" will replay the changes made on the topic branch
    since it diverged from master (i.e., E) until its current commit (C) on
    top of master, and record the result in a new commit along with the
    names of the two parent commits and a log message from the user
    describing the changes.
                         A---B---C topic
                        /         \
                   D---E---F---G---H master

$
































